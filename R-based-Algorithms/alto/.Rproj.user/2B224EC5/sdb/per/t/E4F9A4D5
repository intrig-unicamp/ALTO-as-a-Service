{
    "contents" : "if(!require(data.table)){\n        install.packages(\"data.table\")\n        library(data.table)\n}\n\nbgp.rib.m.anas.filter <- function(input.data, output.path){\n        \n        if (file.exists(input.data)){\n                if (file.info(input.data)$isdir){     \n                        files <- list.files(input.data, full.names = TRUE)\n                } else {\n                        files <- input.data\n                }\n        } else {\n                stop(paste(input.data, \" not found.\", sep=\"\"))\n        }\n        \n        i <- 0 \n        for(f in files){\n                \n                file.name <- gsub(\".*/\",\"\", sub(\"\\\\.[[:alnum:]]+$\", \"\", f))\n                \n                file.name <- sub(\".csv\", \"\", file.name)\n        \n                cat(\"Processing \", f)\n                \n                file.output <- paste(output.path, \"/\", file.name, \n                                         sep = \"\")\n                \n                rib <- data.table(read.csv(f))\n                \n                tryCatch({\n                        rib.alto.wau <- rib[,.(network, netmask, path)]\n                        rib.alto.wau$path <- \n                                sapply(rib.alto.wau$path, \n                                       function(x) substring(x, regexpr(\"[0-9]*$\", x)[1]))\n                        rib.alto.wau <- unique(rib.alto.wau)\n                        rib.alto.wau <- rib.alto.wau[!rib.alto.wau$path == \"\"]\n                        \n                        ## Unique and without aggregation\n                        tryCatch({\n                                dup <-  duplicated(rib.alto.wau, \n                                                   by=c(\"network\",\"netmask\")) | \n                                        duplicated(rib.alto.wau, \n                                                   fromLast = TRUE, \n                                                   by=c(\"network\",\"netmask\"))\n                                \n                                if (! file.exists(output.path)){\n                                        dir.create(output.path, recursive = TRUE)\n                                }\n                                \n                                write.table(rib.alto.wau[!dup,], \n                                            paste(file.output,\".wau.csv\", sep = \"\"), \n                                            row.names = FALSE, quote=FALSE, col.names = FALSE,\n                                            sep=',')\n                        }, error =  function(e) {\n                                cat(\"\\n\")\n                                cat(\"ERROR wau: \",file.output,\".wau.csv\")\n                        })\n                        \n                        ## Repeted network and mask\n                        tryCatch({\n                                rib.alto.rep <- rib.alto.wau[dup,]\n                                write.table(rib.alto.rep, \n                                    paste(file.output,\".rep.csv\", sep = \"\"), \n                                    row.names = FALSE, quote=FALSE, col.names = FALSE, \n                                    sep=',')\n                        }, error =  function(e) {\n                                cat(\"\\n\")\n                                cat(\"ERROR rep: \",file.output,\".rep.csv\")\n                        })\n                        \n                        ## Aggregated Path\n                        tryCatch({\n                                rib.alto.agg <- \n                                        rib[,.(network, netmask, \n                                               path)][rib$path %like% \"\\\\{|\\\\}|\\\\(|\\\\)\"]\n                                \n                                #######################################################\n                                ##change column type\n                                rib.alto.agg$network = as.factor(rib.alto.agg$network)\n                                rib.alto.agg$netmask = as.integer(rib.alto.agg$netmask)\n                                rib.alto.agg$path = as.character (rib.alto.agg$path)\n                                #######################################################\n                                \n                                rib.alto.agg$path <- \n                                        sapply(rib.alto.agg$path, \n                                               function(x) substring(x, \n                                                      regexpr(\"([0-9]* \\\\{.*\\\\}$)|([0-9]* \\\\(.*\\\\)$)\", \n                                                                                x)[1]))\n                                \n                                rib.alto.agg <- unique(rib.alto.agg)\n                                write.table(rib.alto.agg, \n                                            paste(file.output,\".agg.csv\", sep = \"\"), \n                                            row.names = FALSE, quote=FALSE, \n                                            col.names = FALSE, sep=',')  \n                        }, error =  function(e) {\n                                cat(\"\\n\")\n                                cat(\"ERROR agg: \",file.output,\".agg.csv\")\n                        })\n                }, error =  function(e) {\n                        cat(\"\\n\")\n                        cat(\"ERROR FILE\")\n                })\n                cat(\"\\n\\n\")\n        }\n}\n\n\n\n",
    "created" : 1438803856406.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "499680492",
    "id" : "E4F9A4D5",
    "lastKnownWriteTime" : 1439398558,
    "path" : "/local/dlachosper/Dropbox/Code_ALTO/R/alto/alto.R",
    "project_path" : "alto.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}